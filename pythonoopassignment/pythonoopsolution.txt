Python OOP Assignment
Q1. What is the purpose of Python's OOP?
Ans:It allows us to develop applications using an Object-Oriented approach. 
In Python, we can easily create and use classes and objects. 
An object-oriented paradigm is to design the program using classes and objects.
The object is related to real-word entities such as book, house, pencil, etc

Q2. Where does an inheritance search look for an attribute?
Ans: The whole point of a namespace tool like the class statement is to support name inheritance.
In Python, inheritance happens when an object is qualified,
and involves searching an attribute definition tree (one or more namespaces).
Every time you use an expression of the form object

Q3. How do you distinguish between a class object and an instance object?
Ans:Every object has a type and the object types are created using classes.
Instance is an object that belongs to a class. For instance,
list is a class in Python. When we create a list, we have an instance of the list class

Q4. What makes the first argument in a class’s method function special?
Ans: A class method is similar to an instance method,
but it has a class object passed as its first argument.
Recall that, when an instance method is called from an instance object,
that instance object is automatically passed as the first argument to the method.

Q5. What is the purpose of the init method?
Ans: The _init_ method lets the class initialize the object's attributes and serves no other purpose.

Q6. What is the process for creating a class instance?
Ans:To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.

Q7. What is the process for creating a class?
Ans:Enter the class name. (Optional) To enter a short description,
grade level, or class time, tap Section and enter the details.
(Optional) To enter the location for the class, tap Room and enter the details.
(Optional) To add a subject, tap Subject and enter a name.

Q8. How would you define the superclasses of a class?
Ans:A class that is derived from another class is called a subclass (also a derived class, extended class, or child class).
The class from which the subclass is derived is called a superclass (also a base class or a parent class).

Q9. What is the relationship between classes and modules?
Ans:What is the difference between a class and a module? Modules are collections of methods and constants.
They cannot generate instances. Classes may generate instances (objects),
and have per-instance state (instance variables)

Q10. How do you make instances and classes?
Ans:To create instances of a class, you call the class using class name and pass in whatever arguments its __init__ method accepts.

Q11. Where and how should be class attributes created?
Ans:A class attribute is shared by all instances of the class. To define a class attribute, you place it outside of the __init__() method.
Use class_name. ...
Use class attributes for storing class contants, track data across all instances, and setting default values for all instances of the class.

Q12. Where and how are instance attributes created?
Ans: Instance attributes are defined in the constructor. Defined directly inside a class. Defined inside a constructor using the self parameter. Shared across all objects

Q13. What does the term "self" in a Python class mean?
Ans:The self parameter is a reference to the current instance of the class, and is used to access variables that belongs to the class.

Q14. How does a Python class handle operator overloading?
Ans:The operator overloading in Python means provide extended meaning beyond their predefined operational meaning. Such as, we use the "+" operator for adding two integers as well as joining two strings or merging two lists.
We can achieve this as the "+" operator is overloaded by the "int" class and "str" clas

Q15. When do you consider allowing operator overloading of your classes?
Ans:Consider that we have two objects which are a physical representation of a class (user-defined data type) and we have to add two objects with binary '+' operator it throws an error, because compiler don't know how to add two objects. So we define a method for an operator and that process is called operator overloading

Q16. What is the most popular form of operator overloading?
Ans:A very popular and convenient example is the Addition (+) operator. Just think how the '+' operator operates on two numbers and the same operator operates on two strings. It performs “Addition” on numbers whereas it performs “Concatenation” on strings.

Q17. What are the two most important concepts to grasp in order to comprehend Python OOP code?
Ans:When we start with OOP , we don't actually know its purpose , hence half of the motivation is already lost and then comes the concepts of class , objects and methods which are the must to know

Q18. Describe three applications for exception processing.
Ans: there are mainly three kinds of disting uishable errors in python:syntax error,exceptions,and logical errors.

Q19. What happens if you don't do something extra to treat an exception?
Ans: if you don't handle it, the program terminates abruptly and the code past the line that caused the exception will not get executed

Q20. What are your options for recovering from an exception in your script?
Ans:You can also provide a generic except clause, which handles any exception. After the except clause(s), you can include an else-clause. The code in the else-block executes if the code in the try: block does not raise an exception. The else-block is a good place for code that does not need the try: block's protection.

Q21. Describe two methods for triggering exceptions in your script.
Ans: Try – This method catches the exceptions raised by the program. Raise – Triggers an exception manually using custom exceptions.

Q22. Identify two methods for specifying actions to be executed at termination time, regardless of
whether or not an exception exists.

Q23. What is the purpose of the try statement?
Ans:The try block lets you test a block of code for errors. The except block lets you handle the error. The else block lets you execute code when there is no error.

Q24. What are the two most popular try statement variations?
Ans:The Different Try/Except Variations. So far we've used a try / except and even a try / except / except , but this is only two-thirds of the story. There are two other optional segments to a try block: else and finally . Both of these optional blocks will come after the try and the excep

Q25. What is the purpose of the raise statement?
Ans:The raise keyword is used to raise an exception. You can define what kind of error to raise,
    and the text to print to the user.

Q26. What does the assert statement do, and what other statement is it like?
Ans:The assert keyword is used when debugging code. The assert keyword lets you test if a condition in your code returns True, if not, the program will raise an AssertionError.

Q27. What is the purpose of the with/as argument, and what other statement is it like?
Ans:In Python, the with statement replaces a try-catch block with a concise shorthand. More importantly, it ensures closing resources right after processing them. A common example of using the with statement is reading or writing to a file. A function or class that supports the with statement is known as a context manager.

Q28. What are *args, **kwargs?
Ans:args specifies the number of non-keyworded arguments that can be passed and the operations that can be performed on the function in Python whereas **kwargs is a variable number of keyworded arguments that can be passed to a function that can perform dictionary operations.

Q29. How can I pass optional or keyword parameters from one function to another?
Ans:To pass optional or keyword parameters from one function to another, collect the arguments using the * and ** specifiers in the function’s parameter list But, at first, d
o know what are *args and **args in Python.

Q30. What are Lambda Functions?
Ans:lambda is a keyword in Python for defining the anonymous function.

Q31. Explain Inheritance in Python with an example?
Ans:Inheritance relationship defines the classes that inherit from other classes as derived, subclass, or sub-type classes. Base class remains to be the source from which a subclass inherits. For example, you have a Base class of “Animal,” and a “Lion” is a Derived class. The inheritance will be Lion is an Animal.

Q32. Suppose class C inherits from classes A and B as class C(A,B).Classes A and B both have their own versions of method func(). If we call func() from an object of class C, which version gets invoked?
Ans: Use isinstance() to check an instance's type: isinstance(obj, int) will be True only if obj._class_ is int or some class derived from int.    Use issubclass() to check class inheritance: issubclass(bool, int) is True since bool is a subclass of int. 

Q33. Which methods/functions do we use to determine the type of instance and inheritance?
Ans:Using isinstance() function, we can test whether an object/variable is an instance of the specified type or class such as int or list. In the case of inheritance, we can checks if the specified class is the parent class of an object.
Q34.Explain the use of the 'nonlocal' keyword in Python.
Ans:The nonlocal keyword is used to work with variables inside nested functions, where the variable should not belong to the inner function.

Q35. What is the global keyword?
Ans:In Python, the global keyword allows you to change a variable value outside of its current scope. It is used to make changes to a global variable from a local location. The global keyword is only required for altering the variable value and not for publishing or accessing it
